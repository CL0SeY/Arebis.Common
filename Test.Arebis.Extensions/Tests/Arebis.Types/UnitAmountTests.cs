// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using Arebis.Types;
using System.Xml.Serialization;

namespace Arebis.Extensions.Tests.Arebis.Types
{
    /// <summary>
    ///This is a test class for Units.Implementation.Amount and is intended
    ///to contain all Units.Implementation.Amount Unit Tests
    ///</summary>
    [TestClass()]
    public class UnitAmountTests
    {
        #region Initialize & cleanup

        private UnitManager defaultUnitManager;

        [TestInitialize()]
        public void MyTestInitialize()
        {
            this.defaultUnitManager = UnitManager.Instance;
            UnitManager.Instance = new UnitManager();
            UnitManager.RegisterByAssembly(typeof(global::Arebis.Types.LengthUnits).Assembly);

            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;
        }

        [TestCleanup()]
        public void MyTestCleanup()
        {
            UnitManager.Instance = this.defaultUnitManager;
        }

        #endregion Initialize & cleanup

        [TestMethod]
        public void DecimalVersusDouble()
        { 
            decimal dec = 1m/3m;
            double dbl = 1.0 / 3.0;
            Console.WriteLine("Decimals: {0}", dec + dec + dec);
            Console.WriteLine("Doubles: {0}", dbl + dbl + dbl);
        }


        [TestMethod()]
        public void Construction01Test()
        {
            Amount a = new Amount(100, "liter");
            Assert.AreEqual(SIUnitTypes.Length.Power(3), a.Unit.UnitType);
        }

        [TestMethod]
        public void AdditionTest()
        {
            Amount a = new Amount(3000m, LengthUnits.Meter);
            Amount sum = new Amount(2000m, LengthUnits.Meter);
            Amount expected = new Amount(5000m, LengthUnits.Meter);

            sum += a;

            Console.WriteLine("Sum = {0}", sum);
            Assert.AreEqual(expected, sum);
        }

        [TestMethod]
        public void AdditionDerivedTest()
        {
            Amount a = new Amount(3000m, LengthUnits.Meter);
            Amount sum = new Amount(2m, LengthUnits.KiloMeter);
            Amount expected = new Amount(5m, LengthUnits.KiloMeter);

            sum += a;

            Console.WriteLine("Sum = {0}", sum);
            Assert.AreEqual(expected, sum);
        }
        
        [TestMethod()]
        public void Conversion01Test()
        {
            Amount speed = new Amount(120, LengthUnits.KiloMeter / TimeUnits.Hour);
            Amount time = new Amount(15, TimeUnits.Minute);
            Amount distance = (speed * time).ConvertedTo(LengthUnits.KiloMeter, 4);
            Assert.AreEqual(30m, distance.Value);
            Assert.AreEqual(LengthUnits.KiloMeter.Name, distance.Unit.Name);
        }

        [TestMethod()]
        public void Casting01Test()
        {
            Amount a = (Amount)350m;
            Assert.AreEqual(new Amount(350m, Unit.None), a);

            Amount b = new Amount(123m, Unit.None);
            Assert.AreEqual(123m, (decimal)b);

            Amount c = new Amount(500m, LengthUnits.Meter / LengthUnits.KiloMeter);
            Assert.AreEqual(0.5m, (decimal)c);

            Assert.AreEqual("15.3", ((Amount)15.3).ToString());
        }

        [TestMethod()]
        public void Percentage01Test()
        {
            Unit percent = new Unit("percent", "%", 0.01m, Unit.None);

            Amount a = new Amount(15m, percent);
            Amount b = new Amount(300m, TimeUnits.Minute);
            
            Assert.AreEqual("15 %", a.ToString("0 UL"));
            Assert.AreEqual(0.15m, (decimal)a);
            Console.WriteLine(a * b);
            Assert.AreEqual(45m, (a * b).ConvertedTo(TimeUnits.Minute).Value);
        }

        [TestMethod()]
        public void Formatting01Test()
        {
            CultureInfo defaultCultureInfo = Thread.CurrentThread.CurrentCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;

                CultureInfo nlbe = CultureInfo.GetCultureInfo("nl-BE");
                CultureInfo enus = CultureInfo.GetCultureInfo("en-US");

                Amount a = new Amount(12.3456789m, LengthUnits.KiloMeter);
                Amount b = new Amount(12345.6789m, LengthUnits.Meter);
                Amount c = new Amount(-0.45m, LengthUnits.KiloMeter / TimeUnits.Hour);
                Amount d = new Amount(25.678m, LengthUnits.Meter * LengthUnits.Meter);

                Assert.AreEqual("12.3456789 km", a.ToString());
                Assert.AreEqual("12,3456789 kilometer", a.ToString("GN", nlbe));
                Assert.AreEqual("12,35 kilometer", a.ToString("NN", nlbe));
                Assert.AreEqual("12,35 km", a.ToString("NL", nlbe));
                Assert.AreEqual("12.35 km", a.ToString("NL", enus));
                Assert.AreEqual("12.345,68 m", b.ToString("NL", nlbe));
                Assert.AreEqual("12,345.68 m", b.ToString("NL", enus));
                Assert.AreEqual("-0.45 km/h", c.ToString("NL", enus));
                Assert.AreEqual("-0.45 (kilometer/hour)", c.ToString("NN", enus));
                Assert.AreEqual("-0,450 km/h", c.ToString("0.000 UL", nlbe));
                Assert.AreEqual("[0,450] km/h", c.ToString("0.000 UL;[0.000] UL", nlbe));
                Assert.AreEqual("12346 m", b.ToString("0 UL"));
                Assert.AreEqual("12.35 kilometer", b.ToString("NN|kilometer"));
                Assert.AreEqual("12.346 km", b.ToString("#,##0.000 UL|kilometer"));
                Assert.AreEqual("+12.346 km", b.ToString("+#,##0.000 UL|kilometer"));
                Assert.AreEqual("12.346 km neg", (-b).ToString("#,##0.000 UL pos;#,##0.000 UL neg|kilometer"));
                Assert.AreEqual("25.68 m*m", d.ToString("NL"));
                Assert.AreEqual("25.68 m²", d.ToString("NL|?"));
            }
            finally 
            {
                Thread.CurrentThread.CurrentCulture = defaultCultureInfo;
            }
        }

        [TestMethod()]
        public void Formatting02Test()
        {
            Amount b = new Amount(1234.5678m, LengthUnits.Meter);

            Assert.AreEqual("", Amount.ToString(null, "#,##0.000 UN", CultureInfo.InvariantCulture));
            Assert.AreEqual("1,234.568 meter", Amount.ToString(b, "#,##0.000 UN", CultureInfo.InvariantCulture));
        }

        [TestMethod()]
        public void SerializeDeserialize01Test()
        {
            MemoryStream buffer = new MemoryStream();

            // Make some amounts:
            Amount a1before = new Amount(12345.6789m, LengthUnits.Meter);
            Amount a2before = new Amount(-0.45m, LengthUnits.KiloMeter / TimeUnits.Hour);

            // Serialize the units:
            BinaryFormatter f = new BinaryFormatter();
            f.Serialize(buffer,	a1before);
            f.Serialize(buffer, a2before);

            // Reset stream:
            buffer.Seek(0, SeekOrigin.Begin);

            // Deserialize units:
            BinaryFormatter g = new BinaryFormatter();
            Amount a1after = (Amount)g.Deserialize(buffer);
            Amount a2after = (Amount)g.Deserialize(buffer);

            buffer.Close();

            Console.WriteLine("{0} => {1}", a1before, a1after);
            Console.WriteLine("{0} => {1}", a2before, a2after);

            Assert.AreEqual(a1before, a1after);
            Assert.AreEqual(a2before, a2after);
        }

        [TestMethod()]
        [ExpectedException(typeof(NullReferenceException))]
        public void NullAmountIsNotLessThanTest()
        {
            Amount a = null;
            Amount b = (Amount)100m;

            bool result = a < b;
        }

        [TestMethod()]
        public void NullComparisonTest()
        {
            Amount a = null;
            Amount b = (Amount)100m;

            int result = ((IComparable)b).CompareTo(a);

            Assert.IsTrue(result > 0);
        }

        [TestMethod()]
        public void AdditionWithNullTest()
        {
            Amount a, b, sum;

            // Test both not null:
            a = new Amount(100m, LengthUnits.Meter);
            b = new Amount(25m, LengthUnits.Meter);
            sum = a + b;
            Assert.AreEqual(new Amount(125m, LengthUnits.Meter), sum);

            // Test right not null:
            a = new Amount(100m, LengthUnits.Meter);
            b = null;
            sum = a + b;
            Assert.AreEqual(new Amount(100m, LengthUnits.Meter), sum);

            // Test left not null:
            a = null;
            b = new Amount(25m, LengthUnits.Meter);
            sum = a + b;
            Assert.AreEqual(new Amount(25m, LengthUnits.Meter), sum);

            // Test both null:
            a = null;
            b = null;
            sum = a + b;
            Assert.AreEqual(null, sum);
        }

        [TestMethod()]
        public void SubstractWithNullTest()
        {
            Amount a, b, subs;

            // Test both not null:
            a = new Amount(100m, LengthUnits.Meter);
            b = new Amount(25m, LengthUnits.Meter);
            subs = a - b;
            Assert.AreEqual(new Amount(75m, LengthUnits.Meter), subs);

            // Test right not null:
            a = new Amount(100m, LengthUnits.Meter);
            b = null;
            subs = a - b;
            Assert.AreEqual(new Amount(100m, LengthUnits.Meter), subs);

            // Test left not null:
            a = null;
            b = new Amount(25m, LengthUnits.Meter);
            subs = a - b;
            Assert.AreEqual(new Amount(-25m, LengthUnits.Meter), subs);

            // Test both null:
            a = null;
            b = null;
            subs = a - b;
            Assert.AreEqual(null, subs);
        }

        [TestMethod()]
        public void XmlSerializeDeserialize01Test()
        {
            Amount original = new Amount(1234.567m, SurfaceUnits.Are);

            // Serialize:
            MemoryStream ms = new MemoryStream();
            XmlSerializer serializer = new XmlSerializer(typeof(Amount));
            serializer.Serialize(ms, original);

            // Retrieve XML:
            string xml;
            ms.Seek(0, SeekOrigin.Begin);
            StreamReader reader = new StreamReader(ms);
            xml = reader.ReadToEnd();
            Console.WriteLine(xml);

            // Deserialize:
            Amount actual = null;
            ms.Seek(0, SeekOrigin.Begin);
            XmlSerializer deserialize = new XmlSerializer(typeof(Amount));
            actual = (Amount)deserialize.Deserialize(ms);

            Assert.AreEqual(actual, original);
        }

        [TestMethod()]
        public void RoundedComparisonTest()
        {
            Amount a = new Amount(0.045m, LengthUnits.Meter);
            Amount b = new Amount(0.0450000000001m, LengthUnits.Meter);
            Amount c = new Amount(0.0450000000002m, LengthUnits.Meter);
            Amount d = new Amount(0.046m, LengthUnits.Meter);
            Assert.IsFalse(a.Value == b.Value);
            Assert.IsFalse(b.Value == c.Value);
            Assert.IsFalse(a.Value == c.Value);
            Assert.IsTrue(a == b);
            Assert.IsTrue(b == c);
            Assert.IsTrue(a == c);
            Assert.IsFalse(c == d);
            Assert.IsTrue(a.Equals(b));
            Assert.IsTrue(b.Equals(c));
            Assert.IsTrue(a.Equals(c));
            Assert.IsFalse(c.Equals(d));
        }
    }
}
