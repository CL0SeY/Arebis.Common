// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using Arebis.Types;

namespace Arebis.Extensions.Tests.Arebis.Types
{
	/// <summary>
	///This is a test class for Units.Implementation.ComplexUnit and is intended
	///to contain all Units.Implementation.ComplexUnit Unit Tests
	///</summary>
	[TestClass()]
	public class UnitTests
	{
		[TestMethod()]
		public void Constructor01Test()
		{
			Unit u = TimeUnits.Second;
			Assert.AreEqual("second", u.Name);
		}

		[TestMethod()]
		public void Constructor02Test()
		{
			Unit u = LengthUnits.Meter / TimeUnits.Second;
			Console.WriteLine(u.Name);
			Assert.AreEqual("(meter/second)", u.Name);
		}

		[TestMethod()]
		public void Constructor03Test()
		{
			Unit u = LengthUnits.Meter * LengthUnits.Meter;
			Console.WriteLine(u.Name);
			Assert.AreEqual("(meter*meter)", u.Name);
		}

        [TestMethod()]
        public void Construction04Test()
        {
            Unit u = MonetaryUnits.KEuro / (LengthUnits.KiloMeter / (TimeUnits.Hour * TimeUnits.Hour));
            Console.WriteLine(u.Name);
        }
        
		[TestMethod()]
		public void Compatible01Test()
		{
			Unit u = LengthUnits.Meter;
			Unit v = LengthUnits.Meter;
			Assert.IsTrue(u.CompatibleTo(v));
		}

		[TestMethod()]
		public void Compatible02Test()
		{
			Unit u = LengthUnits.Meter;
			Unit v = TimeUnits.Hour;
			Assert.IsFalse(u.CompatibleTo(v));
		}

		[TestMethod()]
		public void Compatible03Test()
		{
			Unit u = LengthUnits.Meter;
			Unit v = LengthUnits.KiloMeter;
			Assert.IsTrue(u.CompatibleTo(v));
		}

		[TestMethod()]
		public void Compatible04Test()
		{
			Unit u = LengthUnits.KiloMeter / TimeUnits.Hour;
			Unit v = LengthUnits.Meter / TimeUnits.Second;
            Unit w = LengthUnits.KiloMeter / TimeUnits.Minute;
            Assert.IsTrue(u.CompatibleTo(u));
            Assert.IsTrue(u.CompatibleTo(v));
            Assert.IsTrue(u.CompatibleTo(w));
            Assert.IsTrue(v.CompatibleTo(u));
            Assert.IsTrue(v.CompatibleTo(v));
            Assert.IsTrue(v.CompatibleTo(w));
            Assert.IsTrue(w.CompatibleTo(u));
            Assert.IsTrue(w.CompatibleTo(v));
            Assert.IsTrue(w.CompatibleTo(w));
        }

        [TestMethod()]
        public void Compatible05Test()
        {
            Unit u = MonetaryUnits.KEuro / (LengthUnits.KiloMeter / (TimeUnits.Hour * TimeUnits.Hour));
            Unit v = MonetaryUnits.KEuro / (LengthUnits.KiloMeter / (TimeUnits.Second * TimeUnits.Hour));
            Assert.IsTrue(u.CompatibleTo(v));
        }

        [TestMethod()]
		public void Compare01Test()
		{
			Unit sec = TimeUnits.Second;
			Assert.IsTrue(((IComparable)TimeUnits.Second).CompareTo(sec) == 0);
			Assert.IsTrue(((IComparable)TimeUnits.Second).CompareTo(TimeUnits.Minute) < 0);
			Assert.IsTrue(((IComparable)TimeUnits.Hour).CompareTo(TimeUnits.Minute) > 0);
			Assert.IsTrue(((IComparable)TimeUnits.Day).CompareTo(TimeUnits.Minute) > 0);
			Assert.IsTrue(((IComparable)(LengthUnits.KiloMeter / TimeUnits.Hour)).CompareTo(LengthUnits.Meter / TimeUnits.Second) < 0);
		}

        [TestMethod()]
        public void Compare02Test()
        {
            Unit u = LengthUnits.Meter;
            Unit v = TimeUnits.Hour;
            Assert.IsTrue(u != v);
        }

        [TestMethod()]
        [ExpectedException(typeof(UnitConversionException))]
        public void Compare03Test()
        {
            Unit u = LengthUnits.Meter;
            Unit v = TimeUnits.Hour;
            int x = ((IComparable)u).CompareTo(v);
        }

		[TestMethod()]
		public void EmptyUnit01test()
		{
			Unit u = LengthUnits.Meter / LengthUnits.Meter;
			Console.WriteLine("Resulting unit: {0}", u);
			Console.WriteLine("None-unit: {0}", Unit.None);
			Assert.AreEqual(Unit.None, u);
		}

		[TestMethod()]
		public void EmptyUnit02test()
		{
			Unit u = LengthUnits.Meter / LengthUnits.KiloMeter;
			Console.WriteLine(u);
			// Compare:
			Assert.AreNotEqual(Unit.None, u);
			// Eliminate the factor difference and compare again:
			Assert.AreEqual(Unit.None, new Unit("x", "x", u.UnitType));
		}

		[TestMethod()]
		public void EmptyUnit03test() 
		{
			Unit h = FrequencyUnits.Hertz;
			Unit s = TimeUnits.Second;

			Unit n = s * h;

			Assert.AreEqual(Unit.None, n);
		}

		[TestMethod()]
		public void SerializeDeserialize01Test()
		{
			MemoryStream buffer = new MemoryStream();

			// Make some units:
			Unit u1before = TimeUnits.Second;
			Unit u2before = VolumeUnits.Liter;
			Unit u3before = LengthUnits.KiloMeter / TimeUnits.Hour;
			Unit u4before = Unit.None;
			Unit u5before = new Unit("Foo", "foo", new UnitType("Bar"));
			Unit u6before = new Unit("KiloFoo²", "kfoo²", 1000m, u5before.Power(2));

			// Serialize the units:
			BinaryFormatter f = new BinaryFormatter();
			f.Serialize(buffer, u1before);
			f.Serialize(buffer, u2before);
			f.Serialize(buffer, u3before);
			f.Serialize(buffer, u4before);
			f.Serialize(buffer, u5before);
			f.Serialize(buffer, u6before);

			// Reset stream:
			buffer.Seek(0, SeekOrigin.Begin);

			// Deserialize units:
			BinaryFormatter g = new BinaryFormatter();
			Unit u1after = (Unit)g.Deserialize(buffer);
			Unit u2after = (Unit)g.Deserialize(buffer);
			Unit u3after = (Unit)g.Deserialize(buffer);
			Unit u4after = (Unit)g.Deserialize(buffer);
			Unit u5after = (Unit)g.Deserialize(buffer);
			Unit u6after = (Unit)g.Deserialize(buffer);

			buffer.Close();

			Console.WriteLine("{0} => {1}", u1before, u1after);
			Console.WriteLine("{0} => {1}", u2before, u2after);
			Console.WriteLine("{0} => {1}", u3before, u3after);
			Console.WriteLine("{0} => {1}", u4before, u4after);
			Console.WriteLine("{0} => {1}", u5before, u5after);
			Console.WriteLine("{0} => {1}", u6before, u6after);

			Assert.AreEqual(u1before, u1after);
			Assert.AreEqual(u2before, u2after);
			Assert.AreEqual(u3before, u3after);
			Assert.AreEqual(u4before, u4after);
			Assert.AreEqual(u5before, u5after);
			Assert.AreEqual(u6before, u6after);
		}

		[TestMethod]
		public void EqualityOfRevesedOrderedCombinedUnitTest()
		{
			Unit u = LengthUnits.Meter / (TimeUnits.Second * TimeUnits.Second);
			Unit v = TimeUnits.Hour.Power(-2) * LengthUnits.KiloMeter;

			Console.WriteLine(u);
			Console.WriteLine(u.UnitType);
			Console.WriteLine();
			Console.WriteLine(v);
			Console.WriteLine(u.UnitType);

			Assert.IsTrue(u.CompatibleTo(v));
			Assert.AreEqual(u.UnitType, v.UnitType);
		}

		[TestMethod]
		public void EqualityOfRevesedOrderedCombinedUnit2Test()
		{
			Unit u = EnergyUnits.Calorie * MassUnits.Gram; ;
			Unit v = MassUnits.MilliGram * EnergyUnits.KiloWattHour;

			Console.WriteLine(u);
			Console.WriteLine(u.UnitType);
			Console.WriteLine();
			Console.WriteLine(v);
			Console.WriteLine(u.UnitType);

			Assert.IsTrue(u.CompatibleTo(v));
			Assert.AreEqual(u.UnitType, v.UnitType);
		}
	}
}

